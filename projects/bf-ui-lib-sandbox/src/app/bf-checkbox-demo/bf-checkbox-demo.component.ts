import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-bf-checkbox-demo',
  templateUrl: './bf-checkbox-demo.component.html',
  styleUrls: ['./bf-checkbox-demo.component.scss']
})
export class BfCheckboxDemoComponent implements OnInit {
  public name = BfCheckboxDoc.name;
  public desc = BfCheckboxDoc.desc;
  public api = BfCheckboxDoc.api;
  public instance = BfCheckboxDoc.instance;
  public myValue = true;
  public textValue = '';
  public isBg = false;

  public instance2 = `<bf-label class="block">
<bf-checkbox class="pad-input">
<bf-checkbox class="pad-input">`;

  public bootstrapHtmlStructure = `<div class="form-check">
  <input class="form-check-input" type="checkbox" value="">
  <label class="form-check-label" for="defaultCheck1">My Text</label>
</div>`;

  public bfHtmlStructure = `<div class="checkbox">
  <label>
    <input type="checkbox" [disabled]="bfDisabled"
           [ngModel]="ngModel" (ngModelChange)="onChange($event)">
    <span class="check-box icon-checkmark3"></span>
    <span class="check-text" [class.has-text]="!!bfLabel">{{bfLabel}}</span>
  </label>
</div>`;
  public inputCheckboxHtml = `<input type="checkbox">`;

  public blockExample = `<bf-checkbox bfLabel="Inline check 1"></bf-checkbox>
<bf-checkbox bfLabel="Inline check 2"></bf-checkbox>
<bf-checkbox bfLabel="Inline check 3"></bf-checkbox>
<bf-checkbox class="block" bfLabel="Block check 4"></bf-checkbox>
<bf-checkbox class="block" bfLabel="Block check 5"></bf-checkbox>
<bf-checkbox class="block" bfLabel="Block check 6"></bf-checkbox>`;

  public cssReset = `$checkbox-uncheck-bg: $white !default;
$checkbox-uncheck-border: $primary_color !default;
$checkbox-check-bg: $primary_color !default;
$checkbox-check-border: darken($primary_color, 3%) !default;
$checkbox-check-color: $white !default;
$checkbox-disabled-bg: $disabled-color !default;
$checkbox-disabled-border: darken($disabled-color, 3%) !default;`;


  // ---- This is the logic to manage autogenerated code example ----
  public brStr = `\n`;
  public bsStr = `\n             `;
  public customCompCode = ``;
  public compConf = {
    bfLabel: 'view.common.username',
    isDisabled: false,
    hasTooltip: false, tooltipText: 'view.tooltip.message', tooltipPos: null, tooltipBody: 'true',
    isClassBlock: false,
    isClassFlat: false,
    isClassRevert: false,
    isClassPadInput: false,
    isClassPadBtn: false,
    isClassPadForm: false,
  };
  public upComp = () => {
    this.customCompCode = `<bf-checkbox `;

    let compClasses = '';
    if (this.compConf.isClassBlock)    { compClasses += (!!compClasses.length ? ' ' : '') + 'block'; }
    if (this.compConf.isClassFlat)     { compClasses += (!!compClasses.length ? ' ' : '') + 'flat'; }
    if (this.compConf.isClassRevert)   { compClasses += (!!compClasses.length ? ' ' : '') + 'revert'; }
    if (this.compConf.isClassPadInput) { compClasses += (!!compClasses.length ? ' ' : '') + 'pad-input'; }
    if (this.compConf.isClassPadBtn)   { compClasses += (!!compClasses.length ? ' ' : '') + 'pad-btn'; }
    if (this.compConf.isClassPadForm)  { compClasses += (!!compClasses.length ? ' ' : '') + 'pad-form'; }
    if (!!compClasses) {
      this.customCompCode += `class="${compClasses}"` + this.bsStr;
    }


    if (this.compConf.bfLabel) { this.customCompCode += `bfLabel="${this.compConf.bfLabel}"`; }

    if (this.compConf.isDisabled) { this.customCompCode += this.bsStr + `[isDisabled]="true"`; }

    if (this.compConf.hasTooltip) {
      this.customCompCode += this.bsStr + `bfTooltip="${this.compConf.tooltipText}"`;
      if (!!this.compConf.tooltipPos)  { this.customCompCode += this.bsStr + `bfTooltipPos="${this.compConf.tooltipPos}"`; }
      if (!!this.compConf.tooltipBody) { this.customCompCode += this.bsStr + `bfTooltipBody="${this.compConf.tooltipBody}"`; }
    }

    this.customCompCode += (`>` + this.brStr + `</bf-checkbox>`);
  }


  constructor() { }

  ngOnInit() {
    this.upComp();
  }

}


export const BfCheckboxDoc = {
  name    : `bf-checkbox`,
  uiType  : 'component',
  desc    : `Generates a button.`,
  api     : `[(ngModel)]     : The ngModel directive is linked to the inner <input>, so that can be used as a form element with ngForm (status is propagated).
[bfLabel]       : Text of the label (optional)
[bfDisabled]    : Boolean value to disable (true) the input
[bfTooltip]     : If set, an info bullet will be added before the label, with a tooltip of the text
[bfTooltipPos]  : Position of the tooltip (top by default)
[bfTooltipBody] : Whether the tooltip is append to the body (default true) or next the the html element (false). The parent contaniner may affect the visibility of the tooltip`,
  instance: `<bf-checkbox [(ngModel)]="myValue" bfLabel="Check me"></bf-checkbox>`,
  demoComp: BfCheckboxDemoComponent
};
