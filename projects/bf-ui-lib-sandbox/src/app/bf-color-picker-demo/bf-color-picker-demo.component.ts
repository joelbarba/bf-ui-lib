import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-bf-color-picker-demo',
  templateUrl: './bf-color-picker-demo.component.html',
  styleUrls: ['./bf-color-picker-demo.component.scss']
})
export class BfColorPickerDemoComponent implements OnInit {
  public name = BfColorPickerDoc.name;
  public desc = BfColorPickerDoc.desc;
  public api = BfColorPickerDoc.api;
  public instance = BfColorPickerDoc.instance;
  public colorValue = '731573';

  public cssReset = `
  $color-picker-gray-dark: #333 !default
  `;

  // ---- This is the logic to manage autogenerated code example ----
  public brStr = `\n`;
  public bsStr = `\n             `;
  public customCompCode = `<bf-color-picker [color]="color" (colorChanged)="onColorChanged($event)"></bf-color-picker>`;
  public compConf: any = {
    color: '731573'
  };
  public upComp = () => {
    this.customCompCode = `<bf-color-picker `;

    let compClasses = '';
    if (this.compConf.hasFullWidth) { compClasses += (!!compClasses.length ? ' ' : '') + 'full-width'; }
    if (this.compConf.hasSquash)    { compClasses += (!!compClasses.length ? ' ' : '') + 'squash'; }
    if (!!compClasses) {
      this.customCompCode += `class="${compClasses}"` + this.bsStr;
    }
    this.customCompCode += `(color)="myVal"` + this.bsStr;
    this.customCompCode += `(colorChanged)="doSomething($event)"`;
    this.customCompCode += (`>` + this.brStr + `</bf-color-picker>`);
  };

  constructor() { }

  ngOnInit() { }

  onColorChanged(color: string): void {
    this.colorValue = color;
  }

}

export const BfColorPickerDoc = {
  name    : `bf-color-picker`,
  uiType  : 'component',
  desc    : `Generates a color picker`,
  api     : `[bfColor]: The initial color value, if empty will default to #00000
(bfColorChanged): An event emitted when the color has changed`,
  instance: `<bf-color-picker color="731573" (colorChanged)="onColorChanged($event)"></bf-color-picker>`,
  demoComp: BfColorPickerDemoComponent
};
