import {BfTranslateService} from '../translate.service';
import {Component, OnInit, Inject, ViewEncapsulation} from '@angular/core';
import { NgbPopoverConfig } from '@ng-bootstrap/ng-bootstrap';

@Component({
  selector: 'app-bf-label-demo',
  templateUrl: './bf-label-demo.component.html',
  styleUrls: ['./bf-label-demo.component.scss'],
  encapsulation: ViewEncapsulation.None,
})
export class BfLabelDemoComponent implements OnInit {
  public name = BfLabelDoc.name;
  public desc = BfLabelDoc.desc;
  public api = BfLabelDoc.api;
  public instance = BfLabelDoc.instance;
  public myVal;

  public instance2 =
`<bf-label bfText="view.common.name" [bfRequired]="true"></bf-label>`;
  public instance3 =
`<bf-label bfText="view.common.email" bfRequired="true"
          bfTooltip="view.tooltip.message">
</bf-label>`;
  public instance4 =
`<bf-label bfText="view.common.name"
          bfTooltip="view.tooltip.message" bfTooltipPos="left" [bfTooltipBody]="false">
</bf-label>`;
  public instance5 = `<bf-label class="no-bold" bfText="No Bold Label"></bf-label>`;
  public instance6 = `<bf-label class="no-colon" bfText="No Colon Label"></bf-label>
<bf-label class="colon value-inline" bfValue="Colon with no label"></bf-label>`;
  public instance7 = `<bf-label bfText="I have the value clickable" (bfClick)="valueClickedExample()"></bf-label>`;
  public instance8 = `<bf-label bfText="I have value" bfValue="I have tooltip" bfValueTooltip="I'm the tooltip"></bf-label>`;
  public bfHtmlStructure =
`<label class="is-required">
  <span class="info-badge" [ngbTooltip]="bfTooltip" [placement]="bfTooltipPos" triggers="hover" container="body">
    <span class="icon-info"></span>
  </span>
  <span>{{bfTextTranslated}}</span>:
  <span class="asterisk">*</span>
</label>`;

  public valueInlineExample = `<bf-label bfText="Label" bfValue="The second value" class="value-inline"></bf-label>`;
  public valueListExample = `<bf-label class="value-list-3" bfText="User Name"   bfValue="Joel Barba" ></bf-label>
<bf-label class="value-list-3" bfText="Email"       bfValue="joel.barba@blueface.com"></bf-label>
<bf-label class="value-list-3" bfText="Number"      bfValue="+353 089 422 6474"></bf-label>
<bf-label class="value-list-3" bfText="Description" bfValue="He is a very nice guy"></bf-label>`;
  public longValue = 'This is a long value to demonstrated what happens when it does not fit into the space of the component';

  public transAbsService = `export abstract class AbstractTranslateService {
  constructor() { }

  // Synchronous translation
  abstract doTranslate(label ?: string): string;
}`;

  public injectLibEx = `import { BfTranslateService } from './translate.service';

@NgModule({
 imports: [
  BfUiLibModule.forRoot({ TranslateService: BfTranslateService })`;


  public extendTransLib = `export class TranslateService extends AbstractTranslateService {
 constructor() { super(); }

 doTranslate(label ?: string): string { â€¦ }
}`;

  public cssReset = `label.is-required {
  color: $primary_color;
}`;


  // ---- This is the logic to manage autogenerated code example ----
  public brStr = `\n`;
  public bsStr = `\n          `;
  public customCompCode = ``;
  public compConf = {
    hasLabel: true, text: 'view.common.username',
    hasValue: true, value: 'view.common.field_name',
    isRequired: false,
    hasTooltip: false, tooltipText: 'view.tooltip.message', tooltipPos: null, tooltipBody: 'true',
    hasBlock: false,
    hasNoBold: false,
    hasNoColon: false,
    hasColon: false,
    hasValueInline: false,
    hasValueBold: false,
    hasValueLight: false,
    hasEllipsis: false,
    textSize: null,
    valueMar: null,
    valuePrimary: false,
    valueWarning: false,
    isError: false,
    formFit: false,
    hasValueList: false, valueList: null, labelLeft: false, valueRight: false,
    valueSpaced: false, valueLeft: false, labelCol: 1, valueCol: 1, valSpClass: '',
    colorBg: false,
  };
  public textSizes = [];
  public valueLists = [];
  public valueMars = [];
  public list1to10 = [{id: 1},{id: 2},{id: 3},{id: 4},{id: 5},{id: 6},{id: 7},{id: 8},{id: 9},{id: 10}];
  public upComp = () => {
    const conf = this.compConf;
    let code = `<bf-label `;

    const css = [];
    if (conf.hasBlock)       { css.push('block'); }
    if (conf.hasNoColon)     { css.push('no-colon'); }
    if (conf.hasColon)       { css.push('colon'); }
    if (conf.hasValueList)   { css.push('value-list'); }
    if (conf.hasNoBold)      { css.push('no-bold'); }
    if (conf.hasValueBold)   { css.push('value-bold'); }
    if (conf.hasValueLight)  { css.push('value-light'); }
    if (conf.hasEllipsis)    { css.push('ellipsis'); }
    if (conf.valuePrimary)   { css.push('value-primary'); }
    if (conf.valueWarning)   { css.push('value-warning'); }
    if (conf.textSize)       { css.push(conf.textSize); }
    if (conf.valueMar)       { css.push(conf.valueMar); }

    conf.valSpClass = '';
    if (conf.valueSpaced) {
      if (conf.labelCol && conf.valueCol) {
        conf.valSpClass = `flex-${conf.labelCol}-${conf.valueCol}`;
        css.push(conf.valSpClass);
      }
      css.push('value-spaced');
      if (conf.valueLeft) { css.push('value-left'); }
      conf.colorBg = true;
      if (conf.value === 'view.common.field_name') { conf.value = this.longValue; }
      conf.hasValueInline = false;
      conf.hasValueList = false; conf.valueList = null; conf.labelLeft = false;
    }

    if (conf.hasValueList)   {
      conf.hasValueInline = false;
      conf.colorBg = true;
      if (conf.value === 'view.common.field_name') { conf.value = this.longValue; }
      if (conf.valueList)  { css.push(conf.valueList); }
      if (conf.labelLeft)  { css.push('label-left'); }
      if (conf.valueRight) { css.push('value-right'); }
    }

    if (conf.hasValueInline) { css.push('value-inline'); }

    if (css.length) { code += `class="${css.join(' ')}"` + this.bsStr; }




    if (conf.hasLabel) { code += `bfText="${conf.text}"`; }
    if (conf.hasValue) { code += (!conf.hasLabel ? '' : this.bsStr) + `bfValue="${conf.value}"`; }

    if (conf.isRequired) { code += this.bsStr + `[bfRequired]="true"`; }

    if (conf.hasTooltip) {
      code += this.bsStr + `bfTooltip="${conf.tooltipText}"`;
      if (!!conf.tooltipPos)  { code += this.bsStr + `bfTooltipPos="${conf.tooltipPos}"`; }
      if (!!conf.tooltipBody) { code += this.bsStr + `bfTooltipBody="${conf.tooltipBody}"`; }
    }
    code += (`>` + this.brStr + `</bf-label>`);
    this.customCompCode = code;
  }

  valueClickedExample(value) {
    alert('You clicked the label value' + value);
  }


  constructor(
    private translate: BfTranslateService,
    private config: NgbPopoverConfig
  ) {
    // Popover default config
    // config.placement = 'top';
    // config.triggers = 'hover';
    // config.container = 'body';

    for (let t = 30; t >= 1; t--) { this.textSizes.push({id: 'text-' + t }); }
    for (let t = 1; t <= 10; t++) { this.valueLists.push({id: 'value-list-' + t }); }
    for (let t = 0; t <=  6; t++) { this.valueMars.push({id: 'value-mar-' + (t * 5) }); }
  }

  ngOnInit() {
    // this.translate.doTranslate('AAAAAAAA');
    this.upComp();
  }

}


export const BfLabelDoc = {
  name    : `bf-label`,
  uiType  : 'component',
  desc    : `Generates a label to title an element in a form.`,
  api     : `[bfText]        : Text to display as label
[bfValue]       : Static value for the label (optional).
[bfRequired]    : Whether the label is for a required field. It adds the class "is-required" on the label (to change the color), and an asterisk after the text.
[bfTooltip]     : If set, an info bullet will be added before the label, with a tooltip of the text
[bfTooltipPos]  : Position of the tooltip (top by default)
[bfTooltipBody] : Whether the tooltip is append to the body (default true) or next the the html element (false). The parent contaniner may affect the visibility of the tooltip`,
  instance: `<bf-label bfText="view.common.username"></bf-label>`,
  demoComp: BfLabelDemoComponent
};
