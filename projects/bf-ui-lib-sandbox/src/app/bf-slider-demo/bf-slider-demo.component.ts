// bf-slider = 'bf-btn'
// BfSlider = 'BfBtn'


import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-bf-slider-demo',
  templateUrl: './bf-slider-demo.component.html',
  styleUrls: ['./bf-slider-demo.component.scss']
})
export class BfSliderDemoComponent implements OnInit {
  public name = BfSliderDoc.name;
  public desc = BfSliderDoc.desc;
  public api = BfSliderDoc.api;
  public instance = BfSliderDoc.instance;

  public instance2 =
`<bf-slider</bf-slider>`;


  public cssReset = `$optional_input_color : $optional-color;
$focused_input_color  : $focused-color;
$required_input_color : $primary_color;
$invalid_input_color  : $invalid-color;
$valid_input_color    : $primary_color;
$disabled_input_color : $disabled-color;

.bf-slider-form-group {
  ...
}`;



  public valueSlider = 50;
  public valueSlider2;

  public sliderOptions: any = {
    start: 10,
    end: 150
  };


  // ---- This is the logic to manage autogenerated code example ----
  public brStr = `\n`;
  public bsStr = `\n           `;
  public customCompCode = `<bf-slider [(ngModel)]="selObj" [bfList]="myList"></bf-slider>`;
  public compConf: any = {
    addSecondValue: false,
    isRequired: false,
    isDisabled: false,
    rows: null,
    hasLabel: false,   labelText: 'My Description',
    hasTooltip: false, tooltipText: 'Hello World', tooltipPos: null
  };

  public upComp = () => {
    this.customCompCode = `<bf-slider `;

    this.customCompCode += `[(ngModel)]="myVal"`;
    // this.customCompCode += `(ngModelChange)="doSomething($event)"`;

    if (this.compConf.isRequired) { this.customCompCode += this.bsStr + `[bfRequired]="true"`; }
    if (this.compConf.isDisabled) { this.customCompCode += this.bsStr + `[bfDisabled]="true"`; }

    if (this.compConf.hasLabel)   { this.customCompCode += this.bsStr + `bfLabel="${this.compConf.labelText}"`; }

    if (this.compConf.hasTooltip) {
      this.customCompCode += this.bsStr + `bfTooltip="${this.compConf.tooltipText}"`;
      if (!!this.compConf.tooltipPos)  { this.customCompCode += this.bsStr + `bfTooltipPos="${this.compConf.tooltipPos}"`; }
    }

    this.customCompCode += (`>` + this.brStr + `</bf-slider>`);
  }





  constructor() { }

  ngOnInit() { }

}


export const BfSliderDoc = {
  name    : `bf-slider`,
  uiType  : 'component',
  desc    : `Generates a slider component`,
  api     : `[(ngModel)]    : The ngModel directive is linked as value on the Slider
[bfHighValue]  : highest Value which will display 2 sliders points
[bfOptions]    : The Config options for the Slider: 
                 {
                  start : Initial range
                  end   : Final range
                 }
[bfDisabled]   : Whether the slider is disabled or not
             
[bfLabel]      : Label of the input (automatically translated). If not provided, no label is displayed.
[bfLabelPos]   : Position of the label (top | left). By default = top.
[bfTooltips]   : If label provided, adds a info badge with a tooltip (automatically translated)
[bfTooltipPos] : Position of the tooltip (top by default)
[bfRequired]   : Whether the value is required. If not, and "Empty" option will be added a the top of the list`,
  instance: `<bf-slider></bf-slider>`,
  demoComp: BfSliderDemoComponent
};
