import { Component, OnInit } from '@angular/core';
import {BfDefer} from '../../../../bf-ui-lib/src/lib/bf-defer/bf-defer';
import {Subject} from 'rxjs';

@Component({
  selector: 'app-bf-loading-spinner-demo]',
  templateUrl: './bf-loading-spinner-demo.component.html',
  styleUrls: ['./bf-loading-spinner-demo.component.scss']
})
export class BfLoadingSpinnerDemoComponent implements OnInit {





  constructor() {
    this.loadingPromise = new Promise(resolve => setTimeout(resolve, 5000));
  }
  public name = BfLoadingSpinnerDoc.name;
  public desc = BfLoadingSpinnerDoc.desc;
  public api = BfLoadingSpinnerDoc.api;
  public instance = BfLoadingSpinnerDoc.instance;

  public directiveInstance = `<div [bf-loading-spinner]="loadingPromise"></div>`;
  public cssInstance = `<span class="bf-loading-spinner"></span>`;
  public overlayExample = `<div [bf-loading-spinner]="loadingPromise">
  <div>....</div>
  <div>....</div>
  <div>....</div>
</div>`;
  public cssReset = `$loading-spinner-color: $primary_color !default;`;

  public loadingPromise;
  public promiseDef;
  public loadOn = false;
  public loadObs = new Subject();


  // ---- This is the logic to manage autogenerated code example ----
  public brStr = `\n`;
  public bsStr = `\n             `;
  public customCompCode = `<bf-loading-spinner></bf-loading-spinner>`;
  public compConf: any = {
    size: 'xs',
    isCenter: false,
    centerPos: 'center',
    triggerType: 'promise',
  };

  public customCompCode2 = `<bf-loading-spinner></bf-loading-spinner>`;

  public sizeCss = {
   sm: `<bf-loading-spinner class="sm"></bf-loading-spinner>`,
   md: `<bf-loading-spinner class="md"></bf-loading-spinner>`,
   lg: `<bf-loading-spinner class="lg"></bf-loading-spinner>`,
   xl: `<bf-loading-spinner class="xl"></bf-loading-spinner>`,
  };

  public centerCss = {
   top    : `<bf-loading-spinner class="center-top"></bf-loading-spinner>`,
   right  : `<bf-loading-spinner class="center-right"></bf-loading-spinner>`,
   left   : `<bf-loading-spinner class="center-left"></bf-loading-spinner>`,
   bottom : `<bf-loading-spinner class="center-bottom"></bf-loading-spinner>`,
  };
  public upComp = () => {
    this.customCompCode = `<bf-loading-spinner `;

    let compClasses = '';
    if (this.compConf.size !== 'xs') { compClasses += (!!compClasses.length ? ' ' : '') + this.compConf.size; }
    if (this.compConf.isCenter)      { compClasses += (!!compClasses.length ? ' ' : '') + this.compConf.centerPos; }
    if (!!compClasses) {
      this.customCompCode += `class="${compClasses}"`;
    }
    this.customCompCode += (`>` + `</bf-loading-spinner>`);
  }
  public upComp2 = () => {
    this.customCompCode2 = `<bf-loading-spinner `;

    let compClasses = '';
    if (this.compConf.size !== 'xs') { compClasses += (!!compClasses.length ? ' ' : '') + this.compConf.size; }
    if (this.compConf.isCenter)      { compClasses += (!!compClasses.length ? ' ' : '') + this.compConf.centerPos; }
    if (!!compClasses) {
      this.customCompCode2 += `class="${compClasses}"`;
    }
    this.customCompCode2 += (`>` + `</bf-loading-spinner>`);
  }

  ngOnInit() {
    this.upComp();
  }

  generatePromise = () => {
    this.promiseDef = new BfDefer();
    return this.promiseDef.promise;
  }

  generateObs = () => new Subject();

}


export const BfLoadingSpinnerDoc = {
  name    : `bf-loading-spinner`,
  uiType  : 'component',
  desc    : `Generates an element with a spinning circle to represent a loading status`,
  api     : `[bf-loading-spinner]   It can be either a boolean, a promise or an observable`,
  instance: `<bf-loading-spinner></bf-loading-spinner>`,
  demoComp: BfLoadingSpinnerDemoComponent
};
