// bf-time-picker = 'bf-btn'
// TimePicker = 'BfBtn'


import { Component, OnInit } from '@angular/core';
import { FormBuilder } from '@angular/forms';
import { NgbTimeStruct } from '@ng-bootstrap/ng-bootstrap';

@Component({
  selector: 'app-bf-time-picker-demo',
  templateUrl: './bf-time-picker-demo.component.html',
  styleUrls: ['./bf-time-picker-demo.component.scss']
})
export class TimePickerDemoComponent implements OnInit {
  public name = BfTimePickerDoc.name;
  public desc = BfTimePickerDoc.desc;
  public api = BfTimePickerDoc.api;
  public instance = BfTimePickerDoc.instance;

  public instance2 =
`<bf-time-picker [showSpinners]="false"></bf-time-picker>`;

  // ---- This is the logic to manage autogenerated code example ----
  public brStr = `\n`;
  public bsStr = `\n             `;
  public minTime = { hour: 10, minute: 45, second: 0 };
  public maxTime = { hour: 18, minute: 45, second: 0 };

  public compConf:any = {
    isRequired: true,
    currentTime: { hour: 14, minute: 45, second: 0 },
    minimumTime: this.minTime,
    maximumTime: this.maxTime,
  };
  public exampleGroup = this._formBuilder.group({});

  public customCompCode =
    `<bf-time-picker
      [currentTime]="${this.compConf.currentTime}"
      [minimumTime]="${this.minTime}"
      [maximumTime]="${this.maxTime}"
      [formGroup]="exampleGroup"
      [controlName]="basic-example"
      [controlLabel]="Basic Example"
      (currentTimeChange)=timeUpdated($event)
  ></bf-time-picker>`;

  timeStructData: NgbTimeStruct;
  timeString: string;

  constructor(private _formBuilder: FormBuilder) { }

  ngOnInit() { }

  timeUpdated(time: any) {
    console.log(time);
  }

  updateTime(timeStruct: NgbTimeStruct): void {
    this.timeStructData = timeStruct;
  }

  updateTimeString(formattedString: string): void {
    this.timeString = formattedString;
  }
}


export const BfTimePickerDoc = {
  name    : `bf-time-picker`,
  uiType  : 'component',
  desc    : `Generates a ....`,
  api     : `
    [isRequired] A flag to determine if the is required validator is applied
    [currentTime] The initial time value if none is supplied it will default to the current time
    [minimumTime] The minimum allowed time
    [maximumTime] The maximum allowed time
    [showSpinners] A flag to determine if the spinners should be shown
    [formGroup] The parent form group (optional)
    [controlName] The name of the form control
    [controlLabel] The label for the element
    [controlId] The id for the element
    [hideErrorMessage] A flag to show/hide validation messages generated in the component bf-dateTime-picker is the only place set to true
    (timeChanged) An event that will send the current time struct and formatted string
    (currentTimeChange) An event that will return the current internal value of the time struct
  `,
  instance: `<bf-time-picker (currentTimeChange)="updateTime($event)" (timeChanged)="updateTimeString($event)"></bf-time-picker>`,
  demoComp: TimePickerDemoComponent
};
