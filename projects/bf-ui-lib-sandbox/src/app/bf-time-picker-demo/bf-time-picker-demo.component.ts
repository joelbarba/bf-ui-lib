// bf-time-picker = 'bf-btn'
// BfTimePicker = 'BfBtn'


import { Component, OnInit } from '@angular/core';
import { of, timer, Observable } from 'rxjs';
import { map, flatMap, tap } from 'rxjs/operators';

@Component({
  selector: 'app-bf-time-picker-demo',
  templateUrl: './bf-time-picker-demo.component.html',
  styleUrls: ['./bf-time-picker-demo.component.scss']
})
export class BfTimePickerDemoComponent implements OnInit {
  public name = BfTimePickerDoc.name;
  public desc = BfTimePickerDoc.desc;
  public api = BfTimePickerDoc.api;
  public instance = BfTimePickerDoc.instance;
  public count = 0;
  public minTime = new Date();
  public maxTime = new Date();
  public defaultTimezone: any;
  public defaultStartDate: Date;
  public supportedTimezones: Array<{ country_code: string, time_zone: string }>;
  public instance2: string;


  public cssReset = `$optional_input_color : $optional-color;
$focused_input_color  : $focused-color;
$required_input_color : $primary_color;
$invalid_input_color  : $invalid-color;
$valid_input_color    : $primary_color;
$disabled_input_color : $disabled-color;

.bf-time-picker-form-group {
  ...
}`;

  // ---- This is the logic to manage autogenerated code example ----
  public brStr = `\n`;
  public bsStr = `\n             `;
  public customCompCode = `
    <bf-time-picker
      [(bfSelectedTime)]="selectedTime"
      [(bfSelectedTimezone)]="selectedTimezone"
      [bfSupportedTimezones]="supportedLocales"
      [bfLocale]="locale">
    </bf-time-picker>`;

  public compConf: any = {
    isDisabled: false,
    minTime: null,
    maxTime: null
  };

  public upComp = () => {
    this.customCompCode = `
     <bf-time-picker
        [(bfSelectedTime)]="selectedTime"
        [(bfSelectedTimezone)]="selectedTimeZone"
        [bfSupportedTimezones]="supportedTimezones"
        [bfLocale]="locale"
        [bfIsDisabled]=${this.compConf.isDisabled}${this.compConf.minTime !== null ? ' [bfMinTime]="' + this.compConf.minTime + '"' : ''}${this.compConf.maxTime !== null ? ' [bfMaxTime]="' + this.compConf.maxTime + '"' : ''}>
      </bf-time-picker>`;
  };

  constructor() { }

  ngOnInit() {
    this.supportedTimezones = [
      'Europe/Budapest',
      'Europe/Dublin',
      'Europe/London',
      'US/Arizona'
    ].map(timezone => ({ country_code: null, time_zone: timezone }));

    this.defaultStartDate = new Date();
    this.defaultStartDate.addHours(1);

    this.maxTime.addDays(2);
    this.minTime.addHours(-2);
    this.defaultTimezone = 'Europe/Dublin';
    this.instance2 = `
      <bf-time-picker
        [bfSelectedTime]="${this.defaultStartDate}"
        [bfMinTime]="${this.minTime}"
        [bfMaxTime]="${this.maxTime}"
        [bfDefaultTimezone]="${this.defaultTimezone}"
        [bfSupportedTimezones]="${this.supportedTimezones}">
      </bf-time-picker>`;
  }
}


export const BfTimePickerDoc = {
  name    : `bf-time-picker`,
  uiType  : 'component',
  desc    : `Generates a ....`,
  api     : `
    [bfSelectedTime]: The value that will recieve updates to date/time can supply default value
    [bfSelectedTimezone]: The value of the desired timezone
    [bfSupportedTimezones]: An list of supported timezones
    [bfLocale]: A locale to specify what localised formats to use. Default is 'en-IE'
    [bfIsDisabled]: A flag to determine if the time-picker is disabled
    [bfMinTime]: The minimum allowable datetime
    [bfMaxTime]: The maximum allowable datetime
    [bfPlacement]: The position to render the dropdown container. Default value is 'bottom' see <a href="https://ng-bootstrap.github.io/#/components/dropdown/api">Angular Bootstap</a> for all possible values

    (bfSelectedTimeChange): An event emitted when the selected time has been changed
    (bfSelectedTimezoneChange): An event emitted when the selected timezone has changed
  `,
  instance: `<bf-time-picker [bfSelectedTimezone]="'Europe/Dublin'" [bfSupportedTimezones]="[{ country_code: null, time_zone: 'Europe/Dublin }, { country_code: null, time_zone: 'US/Arizona' }]"></bf-time-picker>`,
  demoComp: BfTimePickerDemoComponent
};
