// bf-loading-bar = 'bf-btn'
// BfLoadingBar = 'BfBtn'


import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-bf-loading-bar-demo]',
  templateUrl: './bf-loading-bar-demo.component.html',
  styleUrls: ['./bf-loading-bar-demo.component.scss']
})
export class BfLoadingBarDemoComponent implements OnInit {
  public name = BfLoadingBarDoc.name;
  public desc = BfLoadingBarDoc.desc;
  public api = BfLoadingBarDoc.api;
  public instance = BfLoadingBarDoc.instance;

  public instance2 = 
`<bf-loading-bar</bf-loading-bar>`;


  public cssReset = `$input-border: #ccc !default;
$optional_input_color : $input-border;
$disabled_input_color : #797979;
$primary_color        : #00B6F1;
$warning_color        : #ED0677;
$invalid_input_color  : $warning_color;

.bf-loading-bar-form-group {
  ...
}`;





  // ---- This is the logic to manage autogenerated code example ----
  public brStr = `\n`;
  public bsStr = `\n             `;
  public customCompCode = `<bf-dropdown [(ngModel)]="selObj" [bfList]="myList"></bf-dropdown>`;
  public compConf:any = {
    isRequired: false,
    isDisabled: false,
    rows: null,
    hasLabel: false,   labelText: 'My Description',
    hasTooltip: false, tooltipText: 'Hello World', tooltipPos: null, tooltipBody: false,
  };
  public upComp = () => {
    this.customCompCode = `<bf-textarea `;

    let compClasses = '';
    if (this.compConf.hasFullWidth) { compClasses += (!!compClasses.length ? ' ' : '') + 'full-width'; }
    if (this.compConf.hasSquash)    { compClasses += (!!compClasses.length ? ' ' : '') + 'squash'; }
    if (!!compClasses) {
      this.customCompCode += `class="${compClasses}"` + this.bsStr;
    }
    this.customCompCode += `[(ngModel)]="myVal"` + this.bsStr;
    this.customCompCode += `(ngModelChange)="doSomething($event)"`;

    if (this.compConf.hasLabel)   { this.customCompCode += this.bsStr + `bfLabel="${this.compConf.labelText}"`; }
    if (this.compConf.isRequired) { this.customCompCode += this.bsStr + `[bfRequired]="true"`; }
    if (this.compConf.isDisabled) { this.customCompCode += this.bsStr + `[bfDisabled]="true"`; }

    if (this.compConf.hasTooltip) {
      this.customCompCode += this.bsStr + `bfTooltip="${this.compConf.tooltipText}"`;
      if (!!this.compConf.tooltipPos)  { this.customCompCode += this.bsStr + `bfTooltipPos="${this.compConf.tooltipPos}"`; }
      if (!!this.compConf.tooltipBody) { this.customCompCode += this.bsStr + `bfTooltipBody="${this.compConf.tooltipBody}"`; }
    }

    this.customCompCode += (`>` + this.brStr + `</bf-textarea>`);
  };





  constructor() { }

  ngOnInit() { }

}


export const BfLoadingBarDoc = {
  name    : `bfLoadingBar`,
  uiType  : 'module',
  desc    : `Global loading animation to block the page while something is going on`,
  api     : `[bfText]: Button text`,
  instance: `<bf-loading-bar></bf-loading-bar>`, 
  demoComp: BfLoadingBarDemoComponent
};
