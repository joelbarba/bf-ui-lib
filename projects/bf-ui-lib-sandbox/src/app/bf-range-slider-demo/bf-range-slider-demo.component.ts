// bf-range-slider = 'bf-btn'
// BfRangeSlider = 'BfBtn'


import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-bf-range-slider-demo',
  templateUrl: './bf-range-slider-demo.component.html',
  styleUrls: ['./bf-range-slider-demo.component.scss']
})
export class BfRangeSliderDemoComponent implements OnInit {
  public name = BfRangeSliderDoc.name;
  public desc = BfRangeSliderDoc.desc;
  public api = BfRangeSliderDoc.api;
  public instance = BfRangeSliderDoc.instance;

  public instance2 =
`<bf-range-slider</bf-range-slider>`;


  public cssReset = `$slider_bg           : $white !default;
$slider_color_default: $light !default;
$slider_color_primary: $primary_color !default;`;




  public valueSlider = { min: 30, max: 100 };
  public sliderOptions: any = { start: 0, end: 150 };

  // ---- This is the logic to manage autogenerated code example ----
  public brStr = `\n`;
  public bsStr = `\n                 `;
  public customCompCode = `<bf-range-slider [(ngModel)]="selObj" [bfList]="myList"></bf-range-slider>`;
  public compConf: any = {
    isRequired: false,
    isDisabled: false,
    rows: null,
    hasLabel: false,   labelText: 'My Description',
    hasTooltip: false, tooltipText: 'Hello World', tooltipPos: null
  };
  public upComp = () => {
    this.customCompCode = `<bf-range-slider `;

    /*let compClasses = '';
    if (this.compConf.hasFullWidth) { compClasses += (!!compClasses.length ? ' ' : '') + 'full-width'; }
    if (this.compConf.hasSquash)    { compClasses += (!!compClasses.length ? ' ' : '') + 'squash'; }
    if (!!compClasses) {
      this.customCompCode += `class="${compClasses}"` + this.bsStr;
    }*/
    this.customCompCode += `[(ngModel)]="myVal"`;
    this.customCompCode += this.bsStr + `[bfOptions]="sliderOptions"`;

    // if (this.compConf.isRequired) { this.customCompCode += this.bsStr + `[bfRequired]="true"`; }
    if (this.compConf.isDisabled) { this.customCompCode += this.bsStr + `[bfDisabled]="true"`; }

    if (this.compConf.hasLabel)   { this.customCompCode += this.bsStr + `bfLabel="${this.compConf.labelText}"`; }

    if (this.compConf.hasTooltip) {
      this.customCompCode += this.bsStr + `bfTooltip="${this.compConf.tooltipText}"`;
      if (!!this.compConf.tooltipPos)  { this.customCompCode += this.bsStr + `bfTooltipPos="${this.compConf.tooltipPos}"`; }
    }

    this.customCompCode += (`>` + this.brStr + `</bf-range-slider>`);
  };





  constructor() { }

  ngOnInit() { }

}


export const BfRangeSliderDoc = {
  name    : `bf-range-slider`,
  uiType  : 'component',
  desc    : `Generates a range slider component`,
  api     : `[(ngModel)]         :The ngModel is linked as an Object on the Range Slider:
                        {
                          min: (Number) - low value of the range,
                          max: (Number) - high value of the range
                        }
[bfOptions]          : The Config options for the Slider: 
                       {
                         start        : Initial range
                         end          : Final range
                         step         : (Optional) Step between each value
                         showSelectionBar: (Optional) Set to true to show the selection bar before the slider handle
                         showSelectionBarEnd: (Optional) Set to true to show the selection bar after the slider handle
                         showTicks    : (Optional) Set to true to display a tick for each step on the slider
                         showTicksValues: (Optional) Set true to display the value for each tick
                         tickStep     : (Optional) Number - Set the steps to be ticked
                         tickArray    : (Optional) Array - Set specific steps to be ticked
                         tickValueStep: (Optional) Number - Set the steps to show the value
                         maxLimit     : (Optional) Number - max value authorized on the slider
                         minLimit     : (Optional) Number - min value authorized on the slider
                       }
[bfCustomSliderLabel]: -----
[bfDisabled]         : Whether the slider is disabled or not
             
[bfLabel]            : Label of the input (automatically translated). If not provided, no label is displayed.
[bfLabelTooltips]    : If label provided, adds a info badge with a tooltip (automatically translated)
[bfLabelTooltipPos]  : Position of the tooltip (top by default)`,
  instance: `<bf-range-slider [(ngModel)]="value"
                 bfLabel="Test 1" 
                 [bfOptions]="valueOptions">
</bf-range-slider>`,
  demoComp: BfRangeSliderDemoComponent
};
