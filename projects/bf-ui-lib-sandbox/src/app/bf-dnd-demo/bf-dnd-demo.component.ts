import {
  AfterViewInit,
  Component,
  ComponentFactoryResolver,
  Injector,
  OnInit, TemplateRef,
  ViewChild,
  ViewContainerRef
} from '@angular/core';
import {BfGrowlService} from "../../../../bf-ui-lib/src/lib/bf-growl/bf-growl.service";
import {BfBtnComponent} from "../../../../bf-ui-lib/src/lib/bf-btn/bf-btn.component";
import {BfNoDataComponent} from "../../../../bf-ui-lib/src/lib/bf-no-data/bf-no-data.component";
import {BfDnDService} from "../../../../bf-ui-lib/src/lib/bf-dnd/bf-dnd.service";

@Component({
  selector: 'app-bf-drop-placeholder-demo',
  templateUrl: './bf-dnd-demo.component.html',
  styleUrls: ['./bf-dnd-demo.component.scss']
})
export class BfDndDemoComponent implements OnInit, AfterViewInit {
  public name = BfDndDemoDoc.name;
  public desc = BfDndDemoDoc.desc;
  public api = BfDndDemoDoc.api;
  public instance = BfDndDemoDoc.instance;

  public instance2 =
`<bf-drop-placeholder</bf-drop-placeholder>`;


  public cssReset = ``;

  public obj1 = { name: 'Orange' };
  public obj2 = { name: 'Banana' };
  public list1 = [
    { name: 'Orange' },
    { name: 'Banana' },
  ];
  public list2 = [];






  // ---- This is the logic to manage autogenerated code example ----
  public brStr = `\n`;
  public bsStr = `\n             `;
  public customCompCode = `<bf-dropdown [(ngModel)]="selObj" [bfList]="myList"></bf-dropdown>`;
  public compConf:any = {
    isRequired: false,
    isDisabled: false,
    rows: null,
    hasLabel: false,   labelText: 'My Description',
    hasTooltip: false, tooltipText: 'Hello World', tooltipPos: null, tooltipBody: false,
  };
  public upComp = () => {
    this.customCompCode = `<bf-drop-placeholder `;

    let compClasses = '';
    if (this.compConf.hasFullWidth) { compClasses += (!!compClasses.length ? ' ' : '') + 'full-width'; }
    if (this.compConf.hasSquash)    { compClasses += (!!compClasses.length ? ' ' : '') + 'squash'; }
    if (!!compClasses) {
      this.customCompCode += `class="${compClasses}"` + this.bsStr;
    }
    this.customCompCode += `[(ngModel)]="myVal"` + this.bsStr;
    this.customCompCode += `(ngModelChange)="doSomething($event)"`;

    if (this.compConf.hasLabel)   { this.customCompCode += this.bsStr + `bfLabel="${this.compConf.labelText}"`; }
    if (this.compConf.isRequired) { this.customCompCode += this.bsStr + `[bfRequired]="true"`; }
    if (this.compConf.isDisabled) { this.customCompCode += this.bsStr + `[bfDisabled]="true"`; }

    if (this.compConf.hasTooltip) {
      this.customCompCode += this.bsStr + `bfTooltip="${this.compConf.tooltipText}"`;
      if (!!this.compConf.tooltipPos)  { this.customCompCode += this.bsStr + `bfTooltipPos="${this.compConf.tooltipPos}"`; }
      if (!!this.compConf.tooltipBody) { this.customCompCode += this.bsStr + `bfTooltipBody="${this.compConf.tooltipBody}"`; }
    }

    this.customCompCode += (`>` + this.brStr + `</bf-drop-placeholder>`);
  };

  constructor(
    public growl: BfGrowlService,
    private injector: Injector,
    private r: ComponentFactoryResolver,
    public bfDnD: BfDnDService,
  ) {
    // const factory = this.r.resolveComponentFactory(BfNoDataComponent);
    // const compRef = factory.create(injector);
    // const view = compRef.hostView;
    // // this.vc2.createComponent(factory);
  }

  ngOnInit() {

    this.bfDnD.dragEndOk$.subscribe(params => {
      console.log('booom ', params);
    });
  }


  onDragOver(event) {
    // event.stopPropagation();
    event.preventDefault();
  }

  ngAfterViewInit() {

    // const view1 = this.myTemplate.createEmbeddedView(null);
    // const view2 = this.myTemplate.createEmbeddedView(null);
    // this.vc1.insert(view1);
    // this.vc2.insert(view2);
    // this.vc2.createEmbeddedView(this.myTemplate);
  }

}


export const BfDndDemoDoc = {
  name    : `BfDnD`,
  uiType  : 'module',
  desc    : `Generates a ....`,
  api     : `[bfText]: The text... `,
  instance: `<bf-drop-placeholder></bf-drop-placeholder>`,
  demoComp: BfDndDemoComponent
};
