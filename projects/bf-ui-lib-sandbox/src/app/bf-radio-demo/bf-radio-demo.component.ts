import {Component, Input, OnInit} from '@angular/core';

@Component({
  selector: 'app-bf-radio-demo',
  templateUrl: 'bf-radio-demo.component.html',
  styleUrls: ['bf-radio-demo.component.scss']
})export class BfRadioDemoComponent implements OnInit {
  name = BfRadioDoc.name;
  desc = BfRadioDoc.desc;
  api = BfRadioDoc.api;
  instance = BfRadioDoc.instance;

  radioTag = '<bf-radio>';
  radioGroupTag = '<bf-radio-group>';

  cssColors = `$radio-box-color: $required-color !default; // Color of the check box`;

  cssReset = `bf-radio-group {
  bf-label label { color: $myColor; }
  bf-radio div.radio:not(.is-disabled) {
    span.radio-box { border-color: $myColor; }
    label.radio-label { color: $myColor; }
    &.is-checked span.radio-box {
      .radio-box-checked { background: $myColor; }
    }
  }
}`;


  icons = [
    { icon: 'icon-home'          },
    { icon: 'icon-search'        },
    { icon: 'icon-pencil'        },
    { icon: 'icon-eye'           },
    { icon: 'icon-plus'          },
    { icon: 'icon-minus'         },
    { icon: 'icon-cross'         },
    { icon: 'icon-blocked'       },
    { icon: 'icon-undo2'         },
    { icon: 'icon-home'          },
    { icon: 'icon-office'        },
    { icon: 'icon-phone2'        },
    { icon: 'icon-bell2'         },
    { icon: 'icon-user'          },
    { icon: 'icon-users'         },
    { icon: 'icon-lock'          },
    { icon: 'icon-cog'           },
    { icon: 'icon-bin'           },
    { icon: 'icon-shield'        },
    { icon: 'icon-link'          },
    { icon: 'icon-star-full'     },
    { icon: 'icon-thumbs-up'     },
    { icon: 'icon-notification2' },
    { icon: 'icon-warning2'      },
    { icon: 'icon-checkmark'     },
    { icon: 'icon-loop3'         },
    { icon: 'icon-spell-check'   },
  ];


  // ---- This is the logic to manage autogenerated code example ----
  customCompCode = ``;
  myVariable = '2';
  conf = {
    hasLabel: true, bfLabel: 'view.common.name',
    hasTooltip: false, tooltipText: 'view.tooltip.message', tooltipPos: null, tooltipBody: false,
    css: { inline: false, labelBlock: false, white: false, },
    bfRequired: false,
    bfDisabled: false,
    bfErrorOnPristine: false,
    options: [
      {
        name: 'option 1',
        bfValue: '1', bfLabel: 'First', bfIcon: '', bfDisabled: false,
        hasTooltip: false, bfTooltip: 'This is the first option', bfTooltipPos: 'left',
      },
      {
        name: 'option 2',
        bfValue: '2', bfLabel: 'Second', bfIcon: '', bfDisabled: false,
        hasTooltip: false, bfTooltip: 'This is the 2nd option', bfTooltipPos: 'top',
      },
      {
        name: 'option 3',
        bfValue: '3', bfLabel: 'Third', bfIcon: '', bfDisabled: false,
        hasTooltip: false, bfTooltip: 'This is the 3rd option', bfTooltipPos: 'top',
      },
      {
        name: 'option 4',
        bfValue: '4', bfLabel: 'Last One', bfIcon: '', bfDisabled: false,
        hasTooltip: false, bfTooltip: 'This is the 4th option', bfTooltipPos: 'top',
      },
    ],
  };
  upComp = () => {
    const brStr = `\n`;
    const bsStr = `\n                `;
    let code = `<bf-radio-group `;

    let compClasses = '';
    if (this.conf.css.inline) { compClasses += (!!compClasses.length ? ' ' : '') + 'inline'; }
    if (this.conf.css.labelBlock) { compClasses += (!!compClasses.length ? ' ' : '') + 'label-block'; }
    if (this.conf.css.white) { compClasses += (!!compClasses.length ? ' ' : '') + 'white'; }
    if (!!compClasses) { code += `class="${compClasses}"` + bsStr; }

    code += `[(ngModel)]="myVariable"`;

    if (this.conf.bfLabel) { code += bsStr + `bfLabel="${this.conf.bfLabel}"`; }
    if (this.conf.bfRequired) { code += bsStr + `[bfRequired]="true"`; }
    if (this.conf.bfDisabled) { code += bsStr + `[bfDisabled]="true"`; }
    if (this.conf.bfErrorOnPristine) { code += bsStr + `[bfErrorOnPristine]="true"`; }

    if (this.conf.hasTooltip) {
      code += bsStr + `[bfTooltip]="${this.conf.tooltipText}"`;
      if (this.conf.tooltipPos !== 'top') { code += bsStr + `[bfTooltipPos]="${this.conf.tooltipPos}"`; }
      if (this.conf.tooltipBody !== false) { code += bsStr + `[bfTooltipBody]="${this.conf.tooltipBody}"`; }
    }

    code += `>` + brStr;

    this.conf.options.forEach(op => {
      const oneLine = !op.bfIcon && !op.bfDisabled && !op.hasTooltip;
      code += brStr + `  <bf-radio bfValue="${op.bfValue}"`;
      if (oneLine) {
        if (op.bfLabel) { code += ` bfLabel="${op.bfLabel}"`; }
        code += (`></bf-radio>`);
      } else {
        if (op.bfLabel)    { code += brStr + `            bfLabel="${op.bfLabel}"`; }
        if (op.bfIcon)     { code += brStr + `            bfIcon="${op.bfIcon}"`; }
        if (op.bfDisabled) { code += brStr + `            [bfDisabled]="true"`; }
        if (op.bfTooltip)  { code += brStr + `            bfTooltip="${op.bfTooltip}"`; }
        if (op.bfTooltipPos !== 'top') { code += brStr + `            bfTooltipPos="${op.bfTooltipPos}"`; }
        code += (`>` + brStr + `  </bf-radio>`);
      }

    });

    code += (brStr + brStr + `</bf-radio-group>`);
    this.customCompCode = code;
  }

  constructor() { }

  ngOnInit() {
    this.upComp();
  }

  isLinked = true;
  reLink() {
    this.isLinked = false;
    setTimeout(() => this.isLinked = true);
  }

}


export const BfRadioDoc = {
  name    : `bf-radio-group`,
  uiType  : 'component',
  desc    : `Generates a radio button group of input elements.`,
  api     : `For the <bf-radio-group>:
[(ngModel)]     : The current selected value.
[bfLabel]       : Text of the label for the whole group (optional)
[bfRequired]    : If the ngModel doesn't match any of the values, it turns to error state.
[bfDisabled]    : It disables all the radios within the group, regardless of their own [bfDisabled] value.

For every option <bf-radio>:
[bfValue]       : Value of the option, to set to the model when the radio is selected.
[bfLabel]       : Text of the option, to be shown next to the button.
[bfIcon]        : Icon to show between the radio button and the text.
[bfDisabled]    : It disables the radio so it can't be selected.
[bfTooltip]     : If set, an info bullet will be added before the label, with a tooltip of the text.
[bfTooltipPos]  : Position of the tooltip (top by default)
[bfTooltipBody] : Whether the tooltip is append to the body (default true) or next the the html element (false).
`,
  instance: `<bf-radio [(ngModel)]="myVariable" bfLabel="Option 1" bfValue="1"></bf-radio>`,
  demoComp: BfRadioDemoComponent
};
