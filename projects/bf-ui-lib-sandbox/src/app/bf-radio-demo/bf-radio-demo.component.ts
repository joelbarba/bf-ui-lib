import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-bf-radio-demo]',
  templateUrl: './bf-radio-demo.component.html',
  styleUrls: ['./bf-radio-demo.component.scss']
})
export class BfRadioDemoComponent implements OnInit {
  public name = BfRadioDoc.name;
  public desc = BfRadioDoc.desc;
  public api = BfRadioDoc.api;
  public instance = BfRadioDoc.instance;
  public myOp = '1';

  public instance2 = `<bf-radio [(ngModel)]="myVariable" bfLabel="Option 1" bfValue="1"></bf-radio>
<bf-radio [(ngModel)]="myVariable" bfLabel="Option 2" bfValue="2"></bf-radio>
<bf-radio [(ngModel)]="myVariable" bfLabel="Option 3" bfValue="3"></bf-radio>`;

  public instance3 = `<bf-radio [(ngModel)]="myVariable" bfLabel="Option 1" bfValue="1" bfRequired="true"></bf-radio>
<bf-radio [(ngModel)]="myVariable" bfLabel="Option 2" bfValue="2" bfRequired="true"></bf-radio>
<bf-radio [(ngModel)]="myVariable" bfLabel="Option 3" bfValue="3" bfRequired="true"></bf-radio>`;


  public cssReset = `$radio-color: #525254; // text color
$disabled-color: #a0a0a0;
$required_input_color: #00B6F1;
$white: #fff;

div.radio label input[type='radio'] {
  + span.radio-box {
    border-color: darken($radio-color, 3%);
  }

  &:checked + span.radio-box {  // Option selected (checked)
    background: $radio-color;
    &:before { color: $white; }
  }

  &[required]:not([disabled]) { // Required
    &:checked + span.radio-box { background: $required-color; }
    + span.radio-box {
      border-color: darken($required-color, 3%);
    }
  }

  &[disabled] + span.radio-box {  // Disabled
    background: $disabled-color;
    border-color: darken($disabled-color, 3%);
  }
}`;


  // ---- This is the logic to manage autogenerated code example ----
  public brStr = `\n`;
  public bsStr = `\n          `;
  public customCompCode = ``;
  public myVariable;
  public compConf = {
    value: '1',
    labelText: 'view.common.name',
    hasGroup: false, groupValue: 'radio-group-1',
    isRequired: false, isDisabled: true
  };
  public upComp = () => {
    this.customCompCode = `<bf-radio `;
    this.customCompCode += `[(ngModel)]="myVariable"`;
    this.customCompCode += this.bsStr + `bfValue="${this.compConf.value}"`;
    this.customCompCode += this.bsStr + `bfLabel="${this.compConf.labelText}"`;
    if (this.compConf.hasGroup) { this.customCompCode += this.bsStr + `bfRadioGroup="${this.compConf.groupValue}"`; }
    if (this.compConf.isRequired) { this.customCompCode += this.bsStr + `bfRequired="true"`; }
    if (this.compConf.isDisabled) { this.customCompCode += this.bsStr + `bfDisabled="true"`; }

    this.customCompCode += (`>` + this.brStr + `</bf-radio>`);
  };

  constructor() { }

  ngOnInit() {
    this.upComp();
  }

}


export const BfRadioDoc = {
  name    : `bf-radio`,
  uiType  : 'component',
  desc    : `Generates a radio button input element.`,
  api     : `[(ngModel)]     : The ngModel directive is linked to the inner <input>, so that can be used as a form element with ngForm (status is propagated).  
[bfValue]       : Value to set to the model when this radio is selected in the group
[bfLabel]       : Text of the label (optional)
[bfRadioGroup]  : (optional) Name of the group the radio belongs to. The selection is unique within this group.
[bfDisabled]    : Boolean value to disable (true) the input
[bfRequired]    : Turns the input required (the ngModel needs to be one of the values)`,
  instance: `<bf-radio [(ngModel)]="myVariable" bfLabel="Option 1" bfValue="1"></bf-radio>`,
  demoComp: BfRadioDemoComponent
};
