import { Component, OnInit } from '@angular/core';
import {registerLocaleData} from "@angular/common";
import localeZhCN from "@angular/common/locales/zh-Hans";
import localeZhTW from "@angular/common/locales/zh-Hans-HK";
import localeDa from "@angular/common/locales/da";
import localeNl from "@angular/common/locales/nl";
import localeEnCA from "@angular/common/locales/en-CA";
import localeEnGB from "@angular/common/locales/en-GB";
import localeEnIE from "@angular/common/locales/en-IE";
import localeEnUS from "@angular/common/locales/en-US-POSIX";
import localeFi from "@angular/common/locales/fi";
import localeFr from "@angular/common/locales/fr";
import localeDe from "@angular/common/locales/de";
import localeEl from "@angular/common/locales/el";
import localeIt from "@angular/common/locales/it";
import localeJa from "@angular/common/locales/ja";
import localeNo from "@angular/common/locales/nb";
import localePl from "@angular/common/locales/pl";
import localeSv from "@angular/common/locales/sv";
import localeEsES from "@angular/common/locales/es";
import localeEsMx from "@angular/common/locales/es-MX";
import localePtPT from "@angular/common/locales/pt-PT";
import localePtBR from "@angular/common/locales/pt";
import localeIn from "@angular/common/locales/hi";
import localeAr from "@angular/common/locales/ar";
import localeRu from "@angular/common/locales/ru";
import localeMsSG from "@angular/common/locales/ms-SG";
import localeMsMY from "@angular/common/locales/ms";
import localeMsID from "@angular/common/locales/id";
import localeTr from "@angular/common/locales/tr";
import localeKr from "@angular/common/locales/ko";

@Component({
  selector: 'app-bf-date-picker-demo',
  templateUrl: './bf-date-picker-demo.component.html',
  styleUrls: ['./bf-date-picker-demo.component.scss']
})
export class BfDatePickerDemoComponent implements OnInit {
  public name = BfDatePickerDoc.name;
  public desc = BfDatePickerDoc.desc;
  public api = BfDatePickerDoc.api;
  public instance = BfDatePickerDoc.instance;
  public model = '';
  public myVar = '';
  public instance3 = '';

  public myDate2 = '';
  public myDate = '2020-01-19';
  // public myDate = '2015-10-08T08:41:03.868793+00:00';

  public instance2 = `<bf-date-picker</bf-date-picker>`;

  public cssReset = `$optional_input_color : $optional-color;
$focused_input_color  : $focused-color;
$required_input_color : $primary_color;
$invalid_input_color  : $invalid-color;
$valid_input_color    : $primary_color;
$disabled_input_color : $disabled-color;

.bf-date-picker-form-group {
  ...
}`;

  public localesList = [
    { code: 'zh-CN',  name: 'zh-CN' },
    { code: 'zh-TW',  name: 'zh-TW' },
    { code: 'da',     name: 'da' },
    { code: 'nl',     name: 'nl' },
    { code: 'en-CA',  name: 'English CA (en-CA)' },
    { code: 'en-GB',  name: 'English GB (en-GB)' },
    { code: 'en-IE',  name: 'English IE (en-IE)' },
    { code: 'en-US',  name: 'English US (en-US)' },
    { code: 'fi',     name: 'fi' },
    { code: 'fr',     name: 'fr' },
    { code: 'de',     name: 'de' },
    { code: 'el',     name: 'el' },
    { code: 'it',     name: 'it' },
    { code: 'ja',     name: 'ja' },
    { code: 'no',     name: 'no' },
    { code: 'pl',     name: 'pl' },
    { code: 'sv',     name: 'sv' },
    { code: 'es-ES',  name: 'es-ES' },
    { code: 'es-MX',  name: 'es-MX' },
    { code: 'pt-PT',  name: 'pt-PT' },
    { code: 'pt-BR',  name: 'pt-BR' },
    { code: 'in',     name: 'in' },
    { code: 'ar',     name: 'ar' },
    { code: 'ru',     name: 'ru' },
    { code: 'ms-SG',  name: 'ms-SG' },
    { code: 'ms-MY',  name: 'ms-MY' },
    { code: 'ms-ID',  name: 'ms-ID' },
    { code: 'tr',     name: 'tr' },
    { code: 'kr',     name: 'kr' }
  ];




  // ---- This is the logic to manage autogenerated code example ----
  public brStr = `\n`;
  public bsStr = `\n             `;
  public customCompCode = null;
  public compConf: any = {
    data: {
      ngInputModel: null,
      inputMin: null,
      inputMax: null
    },
    bfLocale: 'en-IE',
    isRequired: false,
    hasLabel: false, labelText: 'My Description',
    // hasTooltip: false, tooltipText: 'Hello World', tooltipPos: null, tooltipBody: false,
    convertToText(value) {
      this.data.ngInputModel = !!value ? value.format('L') : null;
    },
    convertToDate() {
      const converter = (input) => {
        // return !!input && moment(input).format('L') !== 'Invalid date' ? moment(input) : null;
      };
      this.data.ngModel = converter(this.data.ngInputModel);
      this.data.min = converter(this.data.inputMin);
      this.data.max = converter(this.data.inputMax);
    }
  };
  public upComp = () => {
    this.customCompCode = `<bf-date-picker `;
    this.customCompCode += `[(ngModel)]="myVal"` + this.bsStr;
    this.customCompCode += `(ngModelChange)="doSomething($event)"`;

    if (this.compConf.hasLabel)   { this.customCompCode += this.bsStr + `bfLabel="${this.compConf.labelText}"`; }
    if (this.compConf.isRequired) { this.customCompCode += this.bsStr + `[bfRequired]="true"`; }

    // if (this.compConf.hasTooltip) {
    //   this.customCompCode += this.bsStr + `bfTooltip="${this.compConf.tooltipText}"`;
    //   if (!!this.compConf.tooltipPos)  { this.customCompCode += this.bsStr + `bfTooltipPos="${this.compConf.tooltipPos}"`; }
    //   if (!!this.compConf.tooltipBody) { this.customCompCode += this.bsStr + `bfTooltipBody="${this.compConf.tooltipBody}"`; }
    // }

    this.customCompCode += (`>` + this.brStr + `</bf-date-picker>`);
  };





  constructor() { }

  ngOnInit() { }

  public checkNewModel = (model) => {
    console.log(model);
  }

}


export const BfDatePickerDoc = {
  name    : `bf-date-picker`,
  uiType  : 'component',
  desc    : `Generates a ....`,
  api     : `[bfText]: The text... `,
  instance: `<bf-date-picker></bf-date-picker>`,
  demoComp: BfDatePickerDemoComponent
};
