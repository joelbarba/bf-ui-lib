import { Component, OnInit } from '@angular/core';

@Component({
  selector: 'app-bf-quantity-input-demo',
  templateUrl: './bf-quantity-input-demo.component.html',
  styleUrls: ['./bf-quantity-input-demo.component.scss']
})
export class BfQuantityInputDemoComponent implements OnInit {

  public myVar: any = 15;
  public myVar2 = 3;
  public lastMod = new Date();
  public name = BfQuantityInputDoc.name;
  public desc = BfQuantityInputDoc.desc;
  public api  = BfQuantityInputDoc.api;

  public instance1 = {
    template: `<bf-quantity-input
 [(ngModel)]="value"                       // 0 at begin
 [name]="instance1.object.name"            // instance1
 [bfDisabled]="instance1.object.disable"   // false
 [bfMinVal]="instance1.object.minValue"    // 3
 [bfMaxVal]="instance1.object.maxValue"    // 30
</bf-quantity-input>`,
    object: {
      name: 'instance1',
      value: 0,
      minValue: 3,
      maxValue: 30,
      mode: 'input-fit',
      disable: false,
      quantityOnChange: null,
      onChange: (item) => this.instance1.object.quantityOnChange = item.quantity
    }
  };

  public instance2 = {
    template: `<bf-quantity-input
 [(ngModel)]="value"                       // 2 at begin
 [name]="instance2.object.name"            // instance2
 [bfDisabled]="instance2.object.disable"   // false
 [bfMinVal]="instance2.object.minValue"    // null
 [bfMaxVal]="instance2.object.maxValue"    // 10 
</bf-quantity-input>`,
    object: {
      name: 'instance2',
      value: 2,
      minValue: null,
      maxValue: 10,
      mode: 'small',
      disable: false
    }
  };

  public cssReset = `$quantity-input-bg: $white !default;
$quantity-input-border: $valid-color !default;
$quantity-input-left-btn: $valid-color !default;
$quantity-input-right-btn: $valid-color !default;
$quantity-input-blocked-btn: darken($primary_color, 8%) !default;`;



  // ---- This is the logic to manage autogenerated code example ----
  public brStr = `\n`;
  public bsStr = `\n                   `;
  public code = ``;
  public conf = {
    value: 0,
    bfDisabled: false,
    hasMode: false, mode: null,
    modeOptions: [{ text: 'small' }, { text: 'large' }, { text: 'button-fit' }],

    hasLabel: false, bfLabel: 'view.common.username',
    hasTooltip: false, tooltipText: 'view.tooltip.message', tooltipPos: null, tooltipBody: false,
    hasMinValue: false, minValue: 0,
    hasMaxValue: false, maxValue: 20,
  };
  public upComp = () => {
    this.code = `<bf-quantity-input `;

    let compClasses = '';
    if (this.conf.hasMode && this.conf.mode) { compClasses += (!!compClasses.length ? ' ' : '') + this.conf.mode; }
    if (!!compClasses) { this.code += `class="${compClasses}"` + this.bsStr; }

    this.code += `[(ngModel)]="myVal"`;

    if (this.conf.hasLabel)    { this.code += this.bsStr + `bfLabel="${this.conf.bfLabel}"`; }
    if (this.conf.bfDisabled)  { this.code += this.bsStr + `[bfDisabled]="true"`; }
    if (this.conf.hasMinValue) { this.code += this.bsStr + `bfMinVal="${this.conf.minValue}"`; }
    if (this.conf.hasMaxValue) { this.code += this.bsStr + `bfMaxVal="${this.conf.maxValue}"`; }
    if (this.conf.hasTooltip)  {
      this.code += this.bsStr + `bfTooltip="${this.conf.tooltipText}"`;
      if (!!this.conf.tooltipPos)  { this.code += this.bsStr + `bfTooltipPos="${this.conf.tooltipPos}"`; }
      if (!!this.conf.tooltipBody) { this.code += this.bsStr + `bfTooltipBody="${this.conf.tooltipBody}"`; }
    }

    this.code += (`>` + this.brStr + `</bf-quantity-input>`);
  };



  constructor() { }

  ngOnInit() {
    this.upComp();
  }

  setLastMod = () => this.lastMod = new Date();

  myFunc($event) {
    console.log('change emited', $event);
  }
}

export const BfQuantityInputDoc = {
  name    : `bf-quantity-input`,
  uiType  : 'component',
  desc    : `Set quantity using the input or the side buttons`,
  api     : `* [(ngModel)]        : Model value
  [name]             : The input name used for control validations
  [class]            : Options: small, large, button-fit
  [bfDisabled]       : Disable input and buttons
  [bfMinVal]         : Minimum value permitted
  [bfMaxVal]         : Maximum value permitted`,
  demoComp: BfQuantityInputDemoComponent
};
